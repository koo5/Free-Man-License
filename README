update
===
It's been a couple of years now since i last researched OSS licensing, and pondered my own license (https://github.com/koo5/Free-Man-License)
..so i took some time to try to get up to speed. And i have to say, the landscape seems to have changed. 
i ran into these novel OS licensing ideas:
	1) https://licensezero.com/
	2) https://writing.kemitchell.com/2016/03/30/First-Read-of-the-Fair-Source-License.html
	https://faircode.io/ https://n8n.io/
	3) https://commonsclause.com/
	4) https://perens.com/2020/08/24/what-comes-after-open-source/

Those six years ago, it seemed to me that attempting to opensource anything by crafting one's own license, or going with anything that FSF/OSI approved ones, was only going to be ridiculed, and that people would grab their heads and say "how can we even know that we could link/use/ship your sw with another sw of a different license", or similar. I mean, even the practice of CLAs seemed an awfully controversial thing back then. But maybe i was just younger and more ideallistic? 

Some events seem to have happened since then, according to my googling:
	https://lwn.net/Articles/763179/
	https://opensource.com/article/19/1/cla-proliferation
	see https://grafana.com/blog/2019/03/28/everything-you-need-to-know-about-the-oss-licensing-war-part-2./
	
Still have quite a bit of reading i'd have to do to make up my mind wrt OSS-related business models, but my takeaways for now are:
If you're going to commoditize your code, you better know what the income-generating complement is. (https://grafana.com/blog/2019/03/20/everything-you-need-to-know-about-the-oss-licensing-war-part-1./)
Copyright is a resource, and licensing is a tool to make most use of it, and probably should be applied strategically on a granular, case-by-case level.

i think there are 3 levels that we can make decisions about:
	1) keeping sauce secret
	2) keeping rights to actual implementation/code
	3) holding patents, if anyone's still into that


random quotes:
	"""The legal protections copyright affords to software writings apply to the specific
	writings embodying the innovation rather than to the innovation itself. Thus, copyright does
	not prevent someone from studying the novel functionality encoded in a writing and then
	creating an original writing to perform the exact same function. The measure of protection
	copyright affords to software authors is therefore only the number of programmer-hours it
	would take for a would-be imitator to replicate the now known function in any given
	programming language. This protection level can be high in the case of very large programs
	such as Microsoft’s Windows operating system. It can be quite low in the case of
	innovations having novel functionality that is easily understood and encoded in a software
	program of modest size."""
	- http://www.oecd.org/education/innovation-education/32125887.pdf

	"""
	. The question rather is whether or not a license is an appropriate remedy for the issue.
	The view here has been, and remains, that licenses do not represent a solution. At best, they’re a band aid, and at worst they may achieve ends opposite of their original intent. There are many reasons to be critical of these controversial licensing approaches, here are ten of the most relevant.
	"""
	- https://redmonk.com/sogrady/2018/12/21/cycles-oss/

	"""
	today's competitive advantage will be tomorrow's commodity and the time between advantage to commoditization is shrinking the collaborative essence of the open source community offers some respite and relief. Geoffrey Moore suggests that competitors should engage the open source community to manage the commonality across the industry. Commonality is fundamentally anything that does not differentiate competitors or does not provide a competitive advantage. The rewards for adopting this strategy is that resources, which were previously working on commonality, can be repurposed to work on value creating activities. """
	- http://web.archive.org/web/20130729212823id_/http://itc.conversationsnetwork.org/shows/detail494.html

	"""Viral licensing is an EXCELLENT competitive tactic to ensure your competition does not perturb your community or monetize your assets:
	BSD-style licensing doesn’t protect your customer relationships in community nor your asset investment"""
	- https://stephesblog.blogs.com/presentations/OSSBusinessModelinOneSlide.pdf

	"Community building doesn’t come for free."
	- https://medium.com/@stephenrwalli/there-is-still-no-open-source-business-model-8748738faa43

	




introduction
===
i love working on lemon but wont be able to do it for free forever. The goal is to not throw away the chance for monetization, uphold the values of Free Software as much as possible, and make it still interesting for potential contributors to contribute. That implies either CLAs or a license functioning as such.
Usual open source business models including dual-licensing can hardly apply to lemon. Most of its source code will be available from lemon itself, as in lemon the UI. As on ordinary programs written in lemon, programming languages usually have a MIT-style license for the standard library and GPL for the interpreter/compiler. In any case, it's pretty complicated. If anything in
http://en.wikipedia.org/wiki/Business_models_for_open-source_software becomes viable, it would be only because the vision of the lemon UX has failed. The program's main goal is to be self-explanatory, easily extended, need no on-site training, no support.

Also, trying to prove that licenses and lawyerspeak can work for people here. Im not the only person who would love to work on basically free software but cant find a way to monetize it.

if you want to contribute to the program under your conditions instead, i hope we can work something out. 

Going with some standard license is an option too.

These are just preliminary notes that wouldn't pass as a proper license.



notes
===

The intent of this license is to encourage <work on this> while ..

avoiding pitfalls outlined in
http://freedomdefined.org/Licenses/NC#The_Case_for_Free_Use:_Reasons_Not_to_Use_a_Creative_Commons_-NC_License

1.Incompatibility:

this license isn't non-commercial. Sale and any kind of reuse is
encouraged. providing services and content covered by this license does
not constitute "use", and is encouraged. license notice is required by
law, to protect users from unknowingly violating it. (protect from the authors)
(sucks, but in a semantic world, hopefully less)

2. Basic and beneficial uses:
solved by "over 7 permanent users"
solved by "if i don't spot you, it's allright" (only going after the big fish) (?)

comment: you can make money reselling the work, 

links
 http://www.falconpl.org/index.ftd?page_id=licensing
 http://tarantsov.com/blog/2012/02/the-third-definition-of-open/
 http://en.wikipedia.org/wiki/Business_models_for_open-source_software
 http://www.drdobbs.com/open-source/the-conflict-at-the-heart-of-open-source/240168123  
 http://sourcecontribute.com/2014/04/03/charging-for-freeopen-source-software/  
 http://research.microsoft.com/en-us/projects/pex/msr-la.txt  

fun
 http://wonko.com/post/jsmin-isnt-welcome-on-google-code
 http://www.groklaw.net/

todo:
 go thru the against-NC article again, add titles, quotes
 projects killed by stupid licenses


versioning - this work is always published under the current version of the license ... 

contributor agreement?
	https://github.com/VCVRack/Rack/blob/v1/.github/CONTRIBUTING.md
	```Legal. A proprietary fork of VCV Rack is planned (see Rack for DAWs), so VCV must own all GPLv3 code. To accept a contribution, all authors of the contribution need to either

    declare the patch under the CC0 license.
    complete a copyright reassignment form.
    perform the work under a paid agreement.
```


	http://en.wikipedia.org/wiki/Contributor_License_Agreement
	'''With the Harmony CLA, "the contributor gives Canonical a licence to use their contributions. The contributor continues to own the copyright in the contribution, with full rights to re-use, re-distribute, and continue modifying the contributed code, allowing them to also share that contribution with other projects.'''
	http://www.clahub.com/
	technically, maybe CLA isnt necessary and could be just made part of the license?
	http://lwn.net/Articles/592503/  
	also the parts of GPL about patents apply

base price on cost of living instead (of the permanent users?)

free man license revision 0
===
this software is 

define core authors?

core authors can, at their option, publish this work or parts of it under a Free Software Foundation approved license (https://www.gnu.org/licenses/licenses.html) (or other license?)

share alike,

commercial use
	in companies with permanently over 7 users: 
	$1/user/year
	covers any number of works covered by this license used

free for all other purposes and uses

you can distribute and sell, modify, yada yada

what is derived work?

half of the collected money goes to the Free Software Foundation or other (open source?) projects at the core authors option? your option?

notes: define donations from the income?

crazy shit:
bounties - not part of the license i guess
a roof - maximum collectible money before the software becomes free. slave software?
"pay for a gpl version":-)



how to define a user? basically give up and charge for only well-definable (desktop) use?
dual licensing, crudely something like CC-NC + additional permissions for non-heavy use + a commercial license?
maybe heavily adapt GPL


http://www.gnu.org/licenses/lgpl.html




avoid CLA by having that in the license, like GPL:
+patents



https://tldrlegal.com/license/peer-production-license
http://www.softwarefreedom.org/resources/
https://github.com/wardi/urwid/issues/41
https://news.ycombinator.com/item?id=7602237
http://www.gnu.org/licenses/gpl-faq.html#AssignCopyright
https://kde.org/community/whatiskde/kdefreeqtfoundation.php
https://n8n.io/
https://commonsclause.com/
https://www.roguewave.com/products-services/imsl-numerical-libraries
https://www.confluent.io/confluent-community-license/
https://www.mongodb.com/licensing/server-side-public-license
https://ethicalsource.dev/licenses/
https://github.com/raisely/NoHarm/blob/publish/licenses/Apache-2.0-NoHarm.md
https://firstdonoharm.dev/
https://medium.com/@stephenrwalli
https://pad.online.debconf.org/p/10-what-comes-after-open-source
https://news.ycombinator.com/item?id=24677481
